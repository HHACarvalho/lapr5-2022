{
	"info": {
		"_postman_id": "f58c5138-4318-4ac8-881a-77d2e8809eca",
		"name": "Route Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23885197"
	},
	"item": [
		{
			"name": "1. Get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Route not found.\", () => {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res).to.eql(\"Route not found.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/route?id=111",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"route"
					],
					"query": [
						{
							"key": "id",
							"value": "111"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2. Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Route created successfully.\", () => {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res.routeDTO.routeId).to.eql(\"111\");\r",
							"    pm.expect(res.routeDTO.origin).to.eql(\"ABC\");\r",
							"    pm.expect(res.routeDTO.destination).to.eql(\"DEF\");\r",
							"    pm.expect(res.routeDTO.distance).to.eql(10);\r",
							"    pm.expect(res.routeDTO.timeDistance).to.eql(10);\r",
							"    pm.expect(res.routeDTO.energySpent).to.eql(10);\r",
							"    pm.expect(res.routeDTO.extraTimeBattery).to.eql(10);\r",
							"    pm.expect(res.token).to.eql(\"Route created successfully.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"routeId\": \"111\",\r\n\t\"origin\": \"ABC\",\r\n\t\"destination\": \"DEF\",\r\n\t\"distance\": 10,\r\n\t\"timeDistance\": 10,\r\n\t\"energySpent\": 10,\r\n\t\"extraTimeBattery\": 10 \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/route/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"route",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "2. Create Duplicate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Route already exists.\", () => {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res).to.eql(\"Route already exists with id=111\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"routeId\": \"111\",\r\n\t\"origin\": \"ABC\",\r\n\t\"destination\": \"DEF\",\r\n\t\"distance\": 10,\r\n\t\"timeDistance\": 10,\r\n\t\"energySpent\": 10,\r\n\t\"extraTimeBattery\": 10 \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/route/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"route",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "3. Get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Route created successfully.\", () => {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res.routeId).to.eql(\"111\");\r",
							"    pm.expect(res.origin).to.eql(\"ABC\");\r",
							"    pm.expect(res.destination).to.eql(\"DEF\");\r",
							"    pm.expect(res.distance).to.eql(10);\r",
							"    pm.expect(res.timeDistance).to.eql(10);\r",
							"    pm.expect(res.energySpent).to.eql(10);\r",
							"    pm.expect(res.extraTimeBattery).to.eql(10);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/route?id=111",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"route"
					],
					"query": [
						{
							"key": "id",
							"value": "111"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4. Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Route created successfully.\", () => {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res.routeDTO.routeId).to.eql(\"111\");\r",
							"    pm.expect(res.routeDTO.origin).to.eql(\"ABC\");\r",
							"    pm.expect(res.routeDTO.destination).to.eql(\"DEF\");\r",
							"    pm.expect(res.routeDTO.distance).to.eql(50);\r",
							"    pm.expect(res.routeDTO.timeDistance).to.eql(50);\r",
							"    pm.expect(res.routeDTO.energySpent).to.eql(50);\r",
							"    pm.expect(res.routeDTO.extraTimeBattery).to.eql(50);\r",
							"    pm.expect(res.token).to.eql(\"Route updated successfully.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"routeId\": \"111\",\r\n\t\"origin\": \"ABC\",\r\n\t\"destination\": \"DEF\",\r\n\t\"distance\": 50,\r\n\t\"timeDistance\": 50,\r\n\t\"energySpent\": 50,\r\n\t\"extraTimeBattery\": 50 \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/route/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"route",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "4. Update (No match)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Route not found.\", () => {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res).to.eql(\"Route not found with origin=ABC | destination=GHI\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"routeId\": \"111\",\r\n\t\"origin\": \"ABC\",\r\n\t\"destination\": \"GHI\",\r\n\t\"distance\": 50,\r\n\t\"timeDistance\": 50,\r\n\t\"energySpent\": 50,\r\n\t\"extraTimeBattery\": 50 \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/route/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"route",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "4. Update (Origin=Destination)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Origin and Destination can't be the same.\", () => {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res).to.eql(\"Origin and Destination can't be the same.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"routeId\": \"111\",\r\n\t\"origin\": \"ABC\",\r\n\t\"destination\": \"ABC\",\r\n\t\"distance\": 50,\r\n\t\"timeDistance\": 50,\r\n\t\"energySpent\": 50,\r\n\t\"extraTimeBattery\": 50 \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/route/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"route",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "5. Get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Route updated successfully.\", () => {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res.routeId).to.eql(\"111\");\r",
							"    pm.expect(res.origin).to.eql(\"ABC\");\r",
							"    pm.expect(res.destination).to.eql(\"DEF\");\r",
							"    pm.expect(res.distance).to.eql(50);\r",
							"    pm.expect(res.timeDistance).to.eql(50);\r",
							"    pm.expect(res.energySpent).to.eql(50);\r",
							"    pm.expect(res.extraTimeBattery).to.eql(50);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/route?id=111",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"route"
					],
					"query": [
						{
							"key": "id",
							"value": "111"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "6. Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Route created successfully.\", () => {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res.routeDTO.routeId).to.eql(\"111\");\r",
							"    pm.expect(res.routeDTO.origin).to.eql(\"ABC\");\r",
							"    pm.expect(res.routeDTO.destination).to.eql(\"DEF\");\r",
							"    pm.expect(res.routeDTO.distance).to.eql(50);\r",
							"    pm.expect(res.routeDTO.timeDistance).to.eql(50);\r",
							"    pm.expect(res.routeDTO.energySpent).to.eql(50);\r",
							"    pm.expect(res.routeDTO.extraTimeBattery).to.eql(50);\r",
							"    pm.expect(res.token).to.eql(\"Route deleted successfully.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/route?id=111",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"route"
					],
					"query": [
						{
							"key": "id",
							"value": "111"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "6. Delete Duplicate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Route not found.\", () => {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res).to.eql(\"Route not found.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/route?id=111",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"route"
					],
					"query": [
						{
							"key": "id",
							"value": "111"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "7. Get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Route not found.\", () => {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res).to.eql(\"Route not found.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/route?id=111",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"route"
					],
					"query": [
						{
							"key": "id",
							"value": "111"
						}
					]
				}
			},
			"response": []
		}
	]
}